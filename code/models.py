import numpy as np
import random

# node_list=[]

class Node:
	def __init__(self,id,speed,gen_blk,mining_block,p_mining_blk,hash_power,selfish):
		self.id = id
		self.speed= speed # fast(1) or slow(0) node
		self.genesis_blk = gen_blk #genesis block
		self.mining_blk = mining_block # block on which mining happens at a time instant
		self.trxn_cnt = 0 # count of trxns generated by node
		self.blk_cnt = 0 # count of blocks generated by node
		self.trxn_pool=[] # list of all trxns seen so far 
		self.peers = [] # list of link object
		self.orphan_blocks = [] # list of blocks whose parents not seen
		self.timestamp_list = [] # list used to store arrival times of blocks
		self.hash_power = hash_power # hash power of node
		self.selfish =selfish # new
		self.private_chain_length=0 # new
		self.public_mining_blk = p_mining_blk # new

class Trxn:
	def __init__(self,txnID,F,to,coins): #payer and payee are id's
		self.id = txnID
		self.payer = F #from
		self.payee = to #to
		self.coins = coins

class link: #represents linking to j
	def __init__(self,j,r_ij,c_ij): #j is id
		self.j = j
		self.r_ij = r_ij #speed of light propogation
		self.c_ij = c_ij #link speed

class Block:
	def __init__(self,blk_id,parent_id,trxn_list,level,parent_ptr):
		self.blk_id = blk_id #block id
		self.parent_id = parent_id # parent block id 
		self.trxn_list = trxn_list #transaction list in block
		self.level = level # level of blk in blockchain
		self.parent_ptr = parent_ptr # parent pointer
		self.child_ptr_list = [] # list of child pointers